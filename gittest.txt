Gitを使ってみます。


developブランチに移り、ここで機能を追加する。
次にdevelop branchをコミットして、そのままmain branchにマージしてみます。

develop branch でadd,commit,pushまで行いました。
push はmainとdevelopの両方。（mainにswitchせずにpushしたけど大丈夫かな・・・）
main branchでは先ほどのdevelop branchでの追加は見えません。

ここまで書いたところでmain branchをadd,commitしてみます。

そしてもう一度、main branchとdevelop branchをpushしました。
ここまでは特に問題なくできていますね。

さて、今度はここでmain branchにスイッチし、mergeしてみましょう。
するとエラーが
error: Your local changes to the following files would be overwritten by merge:
そういえば、main branchに移ってからaddもcommitもしてませんでした。これは迂闊。
では、add, commit,mergeの順にやり直してみます。

さて、下のテキスト（その１）のようにコンフリクトが起きてくれました。
ファイルを修正してもう一度add,commitしてみましょう。

ここで疑問が。
mergeした後のdevelop branchはどうすればいいんでしょう？
もう一回チェックアウトして上書きすればいいのかな？？

ま、それはさておき、ここまでの変更をもう一度add,commit,pushしてしまいましょう。


上の疑問については↓のサイトがわかりやすいですね。
https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E6%A9%9F%E8%83%BD-%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E3%81%A8%E3%83%9E%E3%83%BC%E3%82%B8%E3%81%AE%E5%9F%BA%E6%9C%AC
・・・いらなくなったら消す。まぁ当たり前ですよね。
そもそも機能追加が成功してファイルをmergeしたら、そのbranchは不要なので一般的には決していいのかも。
ただ、そのbranchで継続して進める問題があれば、そのまま残す必要があるのかもしれませんが
その場合は、main branchの変更が反映されないままなので、mainからdevelopへ逆方向のmergeをおこなう必要が
ある、といった感じで今は理解しておきましょう。

ではここで、develop branchは一旦消すとします。



#####ここから下がコンフリクトしたファイルその１
Gitを使ってみます。


<<<<<<< HEAD


develop branch でadd,commit,pushまで行いました。
push はmainとdevelopの両方。（mainにswitchせずにpushしたけど大丈夫かな・・・）
main branchでは先ほどのdevelop branchでの追加は見えません。

ここまで書いたところでmain branchをadd,commitしてみます。

そしてもう一度、main branchとdevelop branchをpushしました。
ここまでは特に問題なくできていますね。

さて、今度はここでmain branchにスイッチし、mergeしてみましょう。
するとエラーが
error: Your local changes to the following files would be overwritten by merge:
そういえば、main branchに移ってからaddもcommitもしてませんでした。これは迂闊。
では、add, commit,mergeの順にやり直してみます。
=======
developブランチに移り、ここで機能を追加する。

次にdevelop branvhをコミットして、そのままmain branchにマージしてみます。
>>>>>>> develop
